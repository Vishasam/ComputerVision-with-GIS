# -*- coding: utf-8 -*-
"""Building Footprints

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1nO8W8Ayrh0-QZAcu38U3KNehVyDhib
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install rasterio

from PIL import Image
import numpy as np
from sklearn.cluster import MeanShift, estimate_bandwidth
import matplotlib.pyplot as plt
import geopandas as gpd
from rasterio.features import shapes as rasterio_shapes
from shapely.geometry import Polygon

# Replace 'your_image.jpg' with the actual path to your JPG file
image_path = '/content/drive/MyDrive/FarmWise AI/CV Assignment with Dataset (1)/CV Assignment with Dataset/drone_image_building_detection/othomosic/ECW/COIMBATORE_PILOT.jpg'
image = Image.open(image_path)

# Preprocess the image (resize if needed, normalization, etc.)
new_width = 200  # Replace with the desired width
new_height = 200  # Replace with the desired height
image = image.resize((new_width, new_height))  # Resize the image to the new dimensions

# Convert the image to a NumPy array
image_np = np.array(image)

# Flatten the image for K-Means clustering
height, width, channels = image_np.shape
flat_image = image_np.reshape(-1, channels)

# Perform Mean Shift clustering to segment the image into clusters
bandwidth = estimate_bandwidth(flat_image, quantile=0.2, n_samples=500)
ms = MeanShift(bandwidth=bandwidth, bin_seeding=True)
labels = ms.fit_predict(flat_image)

# Reshape the labels back to the image dimensions
segmented_image = labels.reshape(height, width)

# Visualize the segmented image
plt.imshow(segmented_image, cmap='viridis')
plt.title("Segmented Coimbatore Image")
plt.axis("off")
plt.show()

from rasterio.features import shapes as rasterio_shapes
from shapely.geometry import Polygon
import geopandas as gpd

# Convert the segmented_image to int32 data type
segmented_image = segmented_image.astype(np.int32)

# Extract features from each cluster (building footprints)
geometries = []
for shape, value in rasterio_shapes(segmented_image, mask=segmented_image > 0):
    if len(shape['coordinates']) > 0:
        if len(shape['coordinates']) > 1:
            # Handle multi-coordinate geometries
            for coords in shape['coordinates']:
                polygon = Polygon(coords)
                geometries.append(polygon)
        else:
            # Handle single-coordinate geometries
            polygon = Polygon(shape['coordinates'][0])
            geometries.append(polygon)

# Create a GeoDataFrame for the building footprints
gdf = gpd.GeoDataFrame({'geometry': geometries})

# Save the building footprints as a shapefile
output_shapefile_path = "/content/drive/MyDrive/FarmWise AI/CV Assignment with Dataset (1)/CV Assignment with Dataset/drone_image_building_detection/othomosic/building_footprints.shp"
gdf.to_file(output_shapefile_path)

# Visualize the building footprints on the original image
fig, ax = plt.subplots(figsize=(10, 10))
gdf.plot(ax=ax, alpha=0.7, edgecolor='red')
ax.imshow(image_np)
ax.set_title("Building Footprints on the Original Image")
ax.axis("off")
plt.show()

